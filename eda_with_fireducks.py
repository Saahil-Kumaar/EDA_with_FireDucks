# -*- coding: utf-8 -*-
"""EDA_with_FireDucks.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bkfcsAlmGlio7PBn72H9nZe-Cqd7CzqJ
"""

!pip install openpyxl
!pip install fireducks

import fireducks.pandas as pd
from matplotlib import pyplot as plt

!wget https://archive.ics.uci.edu/static/public/352/online+retail.zip

!unzip online+retail.zip

df1 = pd.read_excel("Online Retail.xlsx", dtype={'InvoiceNo': 'string', 'StockCode': 'string', 'Description': 'string', 'Country': 'string'})
df1.head()

df1.shape

df1.info()

df1.isnull().sum()

df1[df1.Description.isnull()]

df1[df1.StockCode=="22139"]

most_freq = df1[["StockCode","Description"]].value_counts().reset_index()
most_freq

most_freq[most_freq.StockCode=="85123A"]

most_freq = most_freq.groupby("StockCode").head(1)
most_freq

most_freq.columns = ["StockCode", "Freq_Description", "Count"]
df2 = df1.merge(most_freq, on="StockCode", how="left")
df2

df2["Description"]=df2["Freq_Description"]
df2.head()

df2.isnull().sum()

df2.dropna(subset=["Description"],inplace=True)
df2.isnull().sum()

df2.drop(columns=["Freq_Description","Count"],inplace=True)
df2.head()

df2.describe()

df2[df2.Quantity<0].shape

df2[df2.UnitPrice<=0].shape

df3 = df2[(df2['Quantity'] > 0) & (df2['UnitPrice'] > 0)]
df3.describe()

df3.Quantity.quantile(0.9999)

df3[df3.Quantity>1500]

df4 = df3.copy()
df4["TotalPrice"] = df4["Quantity"] * df4["UnitPrice"]
df4.head()

df4.rename(columns={'TotalPrice':'TotalSales'}, inplace=True)
df4.head()

df4['Month']=df4["InvoiceDate"].dt.month
df4.sample(5)

monthly_sales = df4.groupby('Month')['TotalSales'].sum()
monthly_sales.plot(kind="line",title="Monthly Sales",marker="o")
plt.xlabel("Month")
plt.ylabel("Total Sales")
plt.grid()
plt.show()

country_wise_sales = df4.groupby('Country')['TotalSales'].sum()
total_sales = country_wise_sales.sum()

top_5_countries = country_wise_sales.sort_values(ascending=False).head(5)
percentages = (top_5_countries / total_sales) * 100

plt.figure(figsize=(10, 6))
bars = plt.barh(top_5_countries.index, percentages, color='skyblue')
plt.xlabel('Percentage')
plt.ylabel('Country')
plt.title('Top 5 Countries by Sales Percentage')
plt.grid(axis='x')

for bar, percentage in zip(bars, percentages):
    plt.text(bar.get_width() + 0.5, bar.get_y() + bar.get_height() / 2, f'{percentage:.1f}%', va='center')

plt.show()

product_wise_sales = df4.groupby('StockCode')['TotalSales'].sum()
top_5_products = product_wise_sales.sort_values(ascending=False).head(5)
total_sales = product_wise_sales.sum()
percentages = (top_5_products / total_sales) * 100

bars = plt.barh(top_5_products.index, percentages, color='skyblue')
plt.xlabel('Percentage')
plt.ylabel('Product')
plt.title('Top 5 Products by Sales Percentage')
plt.grid(axis='x')

for bar, percentage in zip(bars, percentages):
    plt.text(bar.get_width() + 0.5, bar.get_y() + bar.get_height() / 2, f'{percentage:.1f}%', va='center')

plt.show()

for stock_code in top_5_products.index:
    product_name = df4[df4['StockCode'] == stock_code]['Description'].iloc[0]
    print(f"{stock_code} ==> {product_name}")

"""**RFM Analysis** (Recency, Frequency, and Monetary value)"""

current_date = df4["InvoiceDate"].max() + pd.Timedelta(days=1)
current_date

rfm = df4.groupby("CustomerID").agg({
    "InvoiceDate":lambda x: (current_date-x.max()).days,
    "InvoiceNo":"count",
    "TotalSales":"sum"
})
rfm.columns = ["Recency","Frequency","Monetary"]
rfm.head()

rfm['R_Segement'] = pd.qcut(rfm['Recency'],4,labels=[4,3,2,1])
rfm['F_Segement'] = pd.qcut(rfm['Frequency'],4,labels=[1,2,3,4])
rfm['M_Segement'] = pd.qcut(rfm['Monetary'],4,labels=[1,2,3,4])
rfm['RFM_Score'] = rfm[['R_Segement','F_Segement','M_Segement']].sum(axis=1)
rfm

rfm.sort_values('RFM_Score', ascending=False)

"""**CUSTOMER CHURN ANALYSIS**"""

customer_last_purchase = df4.groupby("CustomerID")['InvoiceDate'].max()
customer_last_purchase.head(5)

current_date

customer_last_purchase = (current_date - customer_last_purchase).dt.days
customer_last_purchase.head(5)

churn_threshold = 90
churn_customers = customer_last_purchase[customer_last_purchase > churn_threshold]
churn_customers.head()

print(f"Total number of churned customers: {len(churn_customers)}")
plt.figure(figsize=(10, 6))
plt.hist(customer_last_purchase, bins=50, color='red', alpha=0.7)
plt.xlabel('Recency (Days)')
plt.ylabel('Number of Customers')
plt.title('Distribution of Churned Customers by Recency')
plt.axvline(churn_threshold, color='black', linestyle='--', label=f'Churn Threshold ({churn_threshold} days)')
plt.legend()
plt.show()